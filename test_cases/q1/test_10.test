# Basic introduction.
class: "IOTest"
algorithm: "fractionInit"

# Below is the input part.
numerator: "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211"
denominator: "179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639479889735177768741618302107051448115080910246755937681237426900258951040875394506673937916489039005637257224383606487241814360108088853329912322798696840339821"
sign: "'-'"

# The tricky part of the test
trickyPart: """


The number is quit large. Be careful with the time.
HINT: correct gcd algorithm from Discrete Mathematics and Its Applications:

ALGORITHM 1 The Euclidean Algorithm.
procedure gcd(a, b: positive integers)
x := a
y := b
while y = 0
    r := x mod y
    x := y
    y := r
return x{gcd(a, b) is x}

"""
